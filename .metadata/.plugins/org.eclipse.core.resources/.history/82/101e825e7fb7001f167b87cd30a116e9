package com.orangehrm.qa.testcases;

import static org.testng.Assert.assertTrue;

import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.orangehrm.qa.base.SeleniumBase;
import com.orangehrm.qa.pages.DashboardPage;
import com.orangehrm.qa.pages.ForgotPasswordPage;
import com.orangehrm.qa.pages.LoginPage;

public class LoginPageTest extends SeleniumBase {
	LoginPage loginpage;
	ForgotPasswordPage forgotpasswordpage;
	DashboardPage dashboardpage;

	public LoginPageTest() {
		super();
	}

	// --------------------To Initiate browser------------------------
	@BeforeMethod
	public void SetUp() {
		log.info("Initializing the browser and launching the application");
		initialization();
		loginpage = new LoginPage();
		forgotpasswordpage = new ForgotPasswordPage();
		dashboardpage = new DashboardPage();
		log.info("Objects for LoginPage, ForgotPasswordPage, and DashboardPage are initialized");
	}

	@Test(priority = 1)
	public void validateBrandLogoTest() {
		log.info("Verifying the brand logo on the Login page");
		boolean validateBrandLogo = loginpage.validateBrandLogo();
		Assert.assertTrue(validateBrandLogo, "Brand logo of the login page is not displayed");
		log.info("Brand logo displayed: " + validateBrandLogo);
	}

	@Test(priority = 2)
	public void validateLogoHeaderTest() {
		log.info("Verifying the logo header on the Login page");
		boolean validateLogoheader = loginpage.validateLogoHeader();
		Assert.assertTrue(validateLogoheader, "Logo header of the login page is not displayed");
		log.info("Logo header displayed: " + validateLogoheader);
	}

	@Test(priority = 3)
	public void validateDemoUserTest() {
		log.info("Verifying the demo username on the Login page");
		boolean validateDemoUser = loginpage.validateDemoUser();
		Assert.assertTrue(validateDemoUser, "Demo username of the login page is not displayed");
		log.info("Demo username displayed: " + validateDemoUser);
	}

	@Test(priority = 4)
	public void validateDemoPasswordTest() {
		log.info("Verifying the demo password on the Login page");
		boolean validateDemoPassword = loginpage.validateDemoPassword();
		Assert.assertTrue(validateDemoPassword, "Demo password of the login page is not displayed");
		log.info("Demo password displayed: " + validateDemoPassword);
	}

	@Test(priority = 5)
	public void validateIconUserTest() {
		log.info("Verifying the user icon on the Login page");
		boolean validateIconUser = loginpage.validateIconUser();
		Assert.assertTrue(validateIconUser, "Icon user of the login page is not displayed");
		log.info("Icon user displayed: " + validateIconUser);
	}

	@Test(priority = 6)
	public void validateIconPersonTest() {
		log.info("Verifying the person icon on the Login page");
		boolean validateIconPerson = loginpage.validateIconPerson();
		Assert.assertTrue(validateIconPerson, "Icon person of the login page is not displayed");
		log.info("Icon person displayed: " + validateIconPerson);
	}

	@Test(priority = 7)
	public void validateViewUsernameTest() {
		log.info("Verifying the view username field on the Login page");
		boolean validateViewUsername = loginpage.validateViewUsername();
		Assert.assertTrue(validateViewUsername, "View username of the login page is not displayed");
		log.info("View username displayed: " + validateViewUsername);
	}

	@Test(priority = 8)
	public void validateViewPasswordTest() {
		log.info("Verifying the view password field on the Login page");
		boolean validateViewPassword = loginpage.validateViewPassword();
		Assert.assertTrue(validateViewPassword, "View password of the login page is not displayed");
		log.info("View password displayed: " + validateViewPassword);
	}

	@Test(priority = 9)
	public void validateViewVersionTest() {
		log.info("Verifying the version view on the Login page");
		boolean validateViewVersion = loginpage.validateViewVersion();
		Assert.assertTrue(validateViewVersion, "View version of the login page is not displayed");
		log.info("View version displayed: " + validateViewVersion);
	}

	@Test(priority = 10)
	public void validateViewCopyRightsTest() {
		log.info("Verifying the copyright view on the Login page");
		boolean validateViewCopyRights = loginpage.validateViewCopyRights();
		Assert.assertTrue(validateViewCopyRights, "View copyrights of the login page is not displayed");
		log.info("View copyrights displayed: " + validateViewCopyRights);
	}

	@Test(priority = 11)
	public void validateViewSocialLinksTest() {
		log.info("Verifying the social links on the Login page");
		boolean validateViewSocialLinks = loginpage.validateViewSocialLinks();
		Assert.assertTrue(validateViewSocialLinks, "View social links of the login page is not displayed");
		log.info("Social links displayed: " + validateViewSocialLinks);
	}

	@Test(priority = 12)
	public void clickOnForgtPasswordLinkTest() {
		log.info("Clicking on the 'Forgot Password' link on the Login page");
		loginpage.clickOnForgotPasswordLink();
		boolean headerResetPassword = forgotpasswordpage.headerResetPassword();
		assertTrue(headerResetPassword, "Forgot password link is not navigate to forgotpassword page");
		log.info("Navigated to the Forgot Password page successfully");
	}

	@Test(priority = 13)
	public void clickOrangehrmWebsiteTest() {
		log.info("Clicking on the OrangeHRM website link on the Login page");
		loginpage.clickOrangehrmWebsite();
		testutil.switchToWindowByIndex(driver, 1);
		boolean mainOrangehrmImage = loginpage.mainOrangehrmImage();
		assertTrue(mainOrangehrmImage, "Driver does not switch to new window");
		log.info("Switched to new window successfully, verified the OrangeHRM image");
		driver.close();
		testutil.switchToWindowByIndex(driver, 0);
		boolean validateLogoHeader = loginpage.validateLogoHeader();
		assertTrue(validateLogoHeader, "Driver does not switch back to the login page");
		log.info("Switched back to the Login page successfully");
	}

	@Test(priority = 14)
	public void verifyLoginTest() {
		log.info("Verifying the login functionality with valid credentials");
		loginpage.enterLoginCredentials(prop.getProperty("username"), prop.getProperty("password"));
		boolean labelUsername = dashboardpage.labelUsername();
		assertTrue(labelUsername, "Wrong login credentials entered");
		log.info("Successfully logged in and verified username on the Dashboard");
	}

	// ------------------------------To Quit Browser------------------------------
	@AfterMethod
	public void tearDown() {
		log.info("Test execution complete. Closing the browser");
		try {
			if (driver != null) {
				driver.quit();
				log.info("Browser closed successfully");
			}
		} catch (Exception e) {
			log.error("Error while closing the browser: " + e.getMessage());
			e.printStackTrace();
		}
	}
}
