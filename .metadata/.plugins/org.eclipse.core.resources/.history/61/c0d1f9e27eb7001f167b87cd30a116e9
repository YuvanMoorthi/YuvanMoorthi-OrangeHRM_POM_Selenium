package com.orangehrm.qa.testcases;

import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.orangehrm.qa.base.SeleniumBase;
import com.orangehrm.qa.pages.ChangePasswordPage;
import com.orangehrm.qa.pages.DashboardPage;
import com.orangehrm.qa.pages.LoginPage;

public class ChangePasswordPageTest extends SeleniumBase {
	LoginPage loginpage;
	DashboardPage dashboardpage;
	ChangePasswordPage changepasswordpage;

	public ChangePasswordPageTest() {
		super();
	}

	// --------------------To Initiate browser------------------------
	@BeforeMethod
	public void SetUp() {
		log.info("Initializing the browser and launching the application");
		initialization();
		log.info("Login credentials: Username = " + prop.getProperty("username") + ", Password = ********");
		loginpage = new LoginPage();
		dashboardpage = loginpage.enterLoginCredentials(prop.getProperty("username"), prop.getProperty("password"));
		changepasswordpage = dashboardpage.headerDropdownChangePassword();
		log.info("Navigated to the Change Password page");
	}

	@Test(priority = 1)
	public void changeHeaderUpdatePasswordTest() {
		log.info("Verifying the 'Change Password' header is displayed");
		boolean result = changepasswordpage.changeHeaderUpdatePassword();
		Assert.assertTrue(result, "Header of the change password page is not displayed");
		log.info("Change password header visibility: " + result);
	}

	@Test(priority = 2)
	public void changeHeaderUsernameTest() {
		log.info("Verifying the 'Username' label is displayed on the Change Password page");
		boolean result = changepasswordpage.changeHeaderUsername();
		Assert.assertTrue(result, "Username label of the change password page is not displayed");
		log.info("Change password username label visibility: " + result);
	}

	@Test(priority = 3)
	public void changeUsernameAdminTest() {
		log.info("Verifying the 'Username' label value is displayed correctly");
		boolean result = changepasswordpage.changeUsernameAdmin();
		Assert.assertTrue(result, "Username label value is not displayed correctly on the change password page");
		log.info("Change password username label value visibility: " + result);
	}

	@Test(priority = 4)
	public void changeCurrentPasswordTest() {
		log.info("Verifying the 'Current Password' label is displayed");
		boolean result = changepasswordpage.changeCurrentPassword();
		Assert.assertTrue(result, "Current password label is not displayed on the change password page");
		log.info("Change password current password label visibility: " + result);
	}

	@Test(priority = 5)
	public void changeCurrentPasswordValueTest() {
		log.info("Verifying if the 'Current Password' value is entered");
		boolean result = changepasswordpage.changeCurrentPassswordValue(prop.getProperty("password"));
		Assert.assertTrue(result, "Failed to enter the current password value");
		log.info("Change password current password value entered: " + result);
	}

	@Test(priority = 6)
	public void changePasswordTest() {
		log.info("Verifying the 'New Password' label is displayed");
		boolean result = changepasswordpage.changePassword();
		Assert.assertTrue(result, "Password label is not displayed on the change password page");
		log.info("Change password new password label visibility: " + result);
	}

	@Test(priority = 7)
	public void changePasswordValueTest() {
		log.info("Verifying if the 'New Password' value is entered");
		boolean result = changepasswordpage.changePasswordValue(prop.getProperty("newpassword"));
		Assert.assertTrue(result, "Failed to enter the new password value");
		log.info("Change password new password value entered: " + result);
	}

	@Test(priority = 8)
	public void changeConfirmPasswordTest() {
		log.info("Verifying the 'Confirm Password' label is displayed");
		boolean result = changepasswordpage.changeConfirmPassword();
		Assert.assertTrue(result, "Confirm password label is not displayed on the change password page");
		log.info("Change password confirm password label visibility: " + result);
	}

	@Test(priority = 9)
	public void changeConfirmPasswordValueTest() {
		log.info("Verifying if the 'Confirm Password' value is entered");
		boolean result = changepasswordpage.changeConfirmPasswordValue(prop.getProperty("confirmpassword"));
		Assert.assertTrue(result, "Failed to enter the confirm password value");
		log.info("Change password confirm password value entered: " + result);
	}

	@Test(priority = 10)
	public void changeUserPasswordHintTest() {
		log.info("Verifying the 'Password Hint' is displayed");
		boolean result = changepasswordpage.changeUserPasswordHint();
		Assert.assertTrue(result, "Password hint is not displayed on the change password page");
		log.info("Change password hint visibility: " + result);
	}

	@Test(priority = 11)
	public void changeRequiredTextTest() {
		log.info("Verifying if the 'Required Text' is displayed");
		boolean result = changepasswordpage.changeRequiredText();
		Assert.assertTrue(result, "Required text is not displayed on the change password page");
		log.info("Change password required text visibility: " + result);
	}

	@Test(priority = 12)
	public void changeCancelButtonTest() {
		log.info("Verifying the functionality of the 'Cancel' button");
		changepasswordpage.changeCancelButton();
		boolean result = dashboardpage.labelUsername();
		Assert.assertTrue(result, "Failed to navigate back to the dashboard page after clicking Cancel");
		log.info("Change password cancel button functionality passed");
	}

	@Test(priority = 13)
	public void changeResetButtonTest() {
		log.info("Verifying if the 'Reset' button is displayed");
		boolean result = changepasswordpage.changeResetButton();
		Assert.assertTrue(result, "Reset button is not displayed on the change password page");
		log.info("Change password reset button visibility: " + result);
	}

	@Test(priority = 14)
	public void changeCurrentPasswordRequiredTest() {
		log.info("Verifying if 'Current Password' is marked as required");
		boolean result = changepasswordpage.changeCurrentPasswordRequired();
		Assert.assertTrue(result, "Current password field is not marked as required");
		log.info("Change password current password required label visibility: " + result);
	}

	@Test(priority = 15)
	public void changeCompleteResetButtonTest() {
		log.info("Verifying the complete functionality of the 'Reset' button");
		changepasswordpage.changeResetButton();
		changepasswordpage.changeCurrentPasswordRequired();
		changepasswordpage.changePasswordRequired();
		changepasswordpage.changeConfirmPasswordRequired();
		changepasswordpage.changeCurrentPassswordValue(prop.getProperty("password"));
		changepasswordpage.changeResetButton();
		changepasswordpage.changePasswordValue(prop.getProperty("newpassword"));
		changepasswordpage.changeResetButton();
		changepasswordpage.changeConfirmPasswordValue(prop.getProperty("confirmpassword"));
		log.info("Change password complete reset button functionality passed");
	}

	// ------------------------------To Quit Browser------------------------------
	@AfterMethod
	public void tearDown() {
		log.info("Test execution complete. Closing the browser.");
		try {
			if (driver != null) {
				driver.quit();
				log.info("Browser closed successfully");
			}
		} catch (Exception e) {
			log.error("Error while closing the browser: " + e.getMessage());
			e.printStackTrace();
		}
	}
}
